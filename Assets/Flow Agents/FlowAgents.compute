#pragma kernel InitAgents
#pragma kernel UpdateAgents
#pragma kernel UpdateTrail

#include "UnityCG.cginc"

struct Agent
{
	float2 pos; 	// between 0-1
    float2 velocity;
    float speed;
    float2 enforcingDirection;
};
static const float PI = 3.14159265f;

int flowType; // 0: leftToRight, 1: centerToOut, 2: randomToRandom , 4: HorizontalEdgesToCenter
RWStructuredBuffer<Agent> AgentBuffer;
RWTexture2D<float4> TrailTexture;
float2 trailDimension;
Texture2D<float4> VectorFieldTexture; // green channel is the angle 
float2 vectorFieldDimension;
float decay;


uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

float wang_float(uint hash)
{
    return hash / float(0x7FFFFFFF) / 2.0;
}
float wang_random(int seed)
{
    return wang_float(wang_hash(seed));
}
// return 1 if v inside the box, return 0 otherwise
float insideBox(float2 v, float2 bottomLeft, float2 topRight) {
    float2 s = step(bottomLeft, v) - step(topRight, v);
    return s.x * s.y;   
}
float randomSign(float v)
{
	float x = wang_float(wang_hash(v));
	return (step(0.5, x)*2.0) -1.0;
}
float2 randomInitPos(int seed)
{
    float2 pos = float2(0.0, 0.0);
    switch(flowType){
        case(0): //leftToRight
            pos = float2(0.0, wang_random(seed+1));
            break;
        case(1): //centerToOut
            pos = float2(0.45, 0.45)  + float2(wang_random(seed*2.0), wang_random(seed*2.0+1))*0.1;
            break;
        case(2): //randomToRandom
            pos = float2(wang_random(seed), wang_random(seed+1));
            break;
        case(3): //centerToHorizontal
            pos = float2(0.45, wang_random(seed*2.0+1))  + float2(wang_random(seed*2.0), 0.0)*0.1;
            break;
        case(4): //HorizontalEdgesToCenter
            pos = float2(step(0.5, wang_random(seed)), wang_random(seed+1));
            break;
    }
    return pos;
}
float2 randomInitVelocity(float2 pos, int seed )
{
    float2 velocity = float2(0.0, 0.0);
    switch(flowType){
        case(0): //leftToRight
            velocity = float2(0.0, wang_random(seed+1));
            break;
        case(1): //centerToOut
            velocity = float2(wang_random(seed), wang_random(seed+1)) - pos;
            break;
        case(2): //randomToRandom
            velocity = float2(wang_random(seed), wang_random(seed+1));
            break;
        case(3): //centerToHorizontal
            velocity = float2(0.0, wang_random(seed+1)) * randomSign(seed+2.0);
            break;
        case(4): //HorizontalEdgesToCenter
            velocity = float2(0.0, wang_random(seed+1)) * ((step(0.5, pos.x)*2.0) -1.0);
            break;
    }
    return velocity;
}
float2 validatePosition(float2 pos, int seed)
{
    float inside = insideBox(pos, float2(0.0, 0.0), float2(1.0, 1.0));
    float2 newPos = randomInitPos(seed + _Time.y*2.0);
    return inside * pos + (1.0 - inside) * newPos;
}
float2 enforcingDirection(float2 pos)
{
   float2 velocity = float2(0.0, 0.0);
    switch(flowType){
        case(0): //leftToRight
            velocity = float2(1.0, 0.0);
            break;
        case(1): //centerToOut
            velocity = normalize(pos - float2(0.5, 0.5));
            break;
        case(2):
            velocity = float2(0.0, 0.0);
            break;
        case(3): //centerToHorizontal
            velocity = float2(1.0, 0.0) * ((step(0.5, pos.x)*2.0) -1.0);
            break;
        case(4):  //HorizontalEdgesToCenter
            velocity = float2(1.0, 0.0) *((step(0.5, pos.x)*2.0) -1.0) * -1.0;
            break;

    }
    return velocity;
}
[numthreads(8,1,1)]
void InitAgents(uint3 id: SV_DISPATCHTHREADID)
{

	float2 pos = randomInitPos(id.x);
	float2 velocity = randomInitVelocity(pos, id.x+1.0);
    float speed = wang_random(id.x+2.0) * 0.001;

	AgentBuffer[id.x].pos = pos;
	AgentBuffer[id.x].velocity = velocity; 	
    AgentBuffer[id.x].speed = speed; 
    AgentBuffer[id.x].enforcingDirection = enforcingDirection(pos);	
}

[numthreads(8,1,1)]
void UpdateAgents(uint3 id: SV_DISPATCHTHREADID)
{
    float2 pos = AgentBuffer[id.x].pos;
    float2 velocity = AgentBuffer[id.x].velocity;
    float speed = AgentBuffer[id.x].speed;
    float2 enforcingDirection = AgentBuffer[id.x].enforcingDirection;
    
    float vectorAngle =  VectorFieldTexture[pos* vectorFieldDimension.xy].y* 2.0 * PI + wang_random(id.x)*0.1;
    float2 noiseVector = float2(cos(vectorAngle), sin(vectorAngle));

    float2 nextVelocity = (velocity + noiseVector + enforcingDirection)*speed;

    float2 nextPos = pos + nextVelocity;
    float value =1.0;
    TrailTexture[nextPos * trailDimension.xy] = float4(value , value, value, value);	



    AgentBuffer[id.x].pos = validatePosition(nextPos, id.x);
    AgentBuffer[id.x].velocity = nextVelocity;
}

[numthreads(8,8,1)]
void UpdateTrail (uint3 id : SV_DISPATCHTHREADID)
{
    float4 value = TrailTexture[id.xy];
    
    value *= (1.0- decay);
    TrailTexture[id.xy] = value;
}